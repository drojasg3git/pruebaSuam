group 'mx.com.qiip'
version '1.0'

repositories {
    mavenLocal()
    jcenter()
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath('net.serenity-bdd:serenity-gradle-plugin:2.1.4')
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'net.serenity-bdd.aggregator'

sourceCompatibility = 1.8

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

ext {
    serenityVersion = '2.1.4'
    serenityCucumberVersion = '1.9.51'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.14.0'
    testImplementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation group: 'io.appium', name: 'java-client', version: '7.3.0'
    compile group: 'co.com.devco.automation', name: 'automationDevcoLibrary', version: '1.3.1'
    implementation "net.serenity-bdd:serenity-rest-assured:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay-rest:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-core:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-junit:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-cucumber:$rootProject.ext.serenityCucumberVersion"
    testImplementation "org.hamcrest:hamcrest-core:1.3"
    testImplementation 'org.jmockit:jmockit:1.49'

    compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.716'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-core', version: '1.11.716'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-cognitoidp', version: '1.11.716'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.10'

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperty "file.encoding", "UTF-8"
    maxParallelForks = 1
}

test {
    try {
        systemProperty "runner", findProperty("runner")
        def runner = "${runner}".split(",")
        for (run in runner){
            include "**/"+run+".class"
        }
    } catch (Exception ex) {
    }
}